managed implementation in class zbp_vc_travel_m_3 unique;
strict ( 2 );

define behavior for zvc_travel_m_3 //alias <alias_name>
persistent table /dmo/travel_m
lock master
authorization master ( instance )
etag master LastChangedAt
{
  create;
  update;
  delete;
  field ( readonly ) TravelId;
  association _Booking { create; }
  mapping for /dmo/travel_m
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}


define behavior for ZVC_BOOKING_M_3 //alias <alias_name>
persistent table /dmo/booking_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId;
  association _Travel;
  association _Bookingsupp { create; }
 mapping for /dmo/booking_m
 {
     TravelId = travel_id;
     BookingId = booking_id;
     BookingDate = booking_date;
     CustomerId = customer_id;
    CarrierId =  carrier_id;
     ConnectionId = connection_id;
     FlightDate = flight_date;
     FlightPrice = flight_price;
     CurrencyCode = currency_code;
     BookingStatus = booking_status;
     LastChangedAt = last_changed_at;
 }

}



define behavior for zvc_bookingsupp_M_3 alias Bookingsuppl
persistent table /dmo/booksuppl_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;
  field ( readonly ) BookingId, TravelId, BookingSupplementId;
  association _Booking;
  association _Travel;
  mapping for /dmo/booksuppl_m
  {
     TravelId = travel_id;
     BookingId = booking_id;
     BookingSupplementId = booking_supplement_id;
     SupplementId = supplement_id;
     Price = price;
     CurrencyCode = currency_code;
     LastChangedAt = last_changed_at;

  }
}